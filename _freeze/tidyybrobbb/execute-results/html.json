{
  "hash": "be171c6d8c601c7dd8af2d45ecaaecb4",
  "result": {
    "markdown": "---\ntitle: \"tidyyprobb\"\nserver: shiny\n---\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n:::\n\n::: {.cell}\n\n:::\n\n#view the three data frames\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nspc_tbl_ [5 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ country_name  : chr [1:5] \"Iraq\" \"Comoros\" \"Panama\" \"Maldives\" ...\n $ ladder_score  : num [1:5] 4.85 4.29 6.18 5.2 6.49\n $ gdp           : num [1:5] 9.24 8.03 10.35 9.83 10.57\n $ social_support: num [1:5] 0.746 0.626 0.896 0.913 0.932\n - attr(*, \"spec\")=\n  .. cols(\n  ..   country_name = col_character(),\n  ..   ladder_score = col_double(),\n  ..   gdp = col_double(),\n  ..   social_support = col_double()\n  .. )\n - attr(*, \"problems\")=<externalptr> \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\ntibble [5 × 2] (S3: tbl_df/tbl/data.frame)\n $ country_name           : chr [1:5] \"Iraq\" \"Comoros\" \"Panama\" \"Maldives\" ...\n $ healthy_life_expectancy: num [1:5] 60.6 57.3 69.7 70.6 74.7\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nspc_tbl_ [149 × 20] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ country_name                             : chr [1:149] \"Finland\" \"Denmark\" \"Switzerland\" \"Iceland\" ...\n $ region                                   : chr [1:149] \"Western Europe\" \"Western Europe\" \"Western Europe\" \"Western Europe\" ...\n $ ladder_score                             : num [1:149] 7.84 7.62 7.57 7.55 7.46 ...\n $ standard_error_of_ladder_score           : num [1:149] 0.032 0.035 0.036 0.059 0.027 0.035 0.036 0.037 0.04 0.036 ...\n $ upperwhisker                             : num [1:149] 7.9 7.69 7.64 7.67 7.52 ...\n $ lowerwhisker                             : num [1:149] 7.78 7.55 7.5 7.44 7.41 ...\n $ logged_gdp_per_capita                    : num [1:149] 10.8 10.9 11.1 10.9 10.9 ...\n $ social_support                           : num [1:149] 0.954 0.954 0.942 0.983 0.942 0.954 0.934 0.908 0.948 0.934 ...\n $ healthy_life_expectancy                  : num [1:149] 72 72.7 74.4 73 72.4 73.3 72.7 72.6 73.4 73.3 ...\n $ freedom_to_make_life_choices             : num [1:149] 0.949 0.946 0.919 0.955 0.913 0.96 0.945 0.907 0.929 0.908 ...\n $ generosity                               : num [1:149] -0.098 0.03 0.025 0.16 0.175 0.093 0.086 -0.034 0.134 0.042 ...\n $ perceptions_of_corruption                : num [1:149] 0.186 0.179 0.292 0.673 0.338 0.27 0.237 0.386 0.242 0.481 ...\n $ ladder_score_in_dystopia                 : num [1:149] 2.43 2.43 2.43 2.43 2.43 2.43 2.43 2.43 2.43 2.43 ...\n $ explained_by_log_gdp_per_capita          : num [1:149] 1.45 1.5 1.57 1.48 1.5 ...\n $ explained_by_social_support              : num [1:149] 1.11 1.11 1.08 1.17 1.08 ...\n $ explained_by_healthy_life_expectancy     : num [1:149] 0.741 0.763 0.816 0.772 0.753 0.782 0.763 0.76 0.785 0.782 ...\n $ explained_by_freedom_to_make_life_choices: num [1:149] 0.691 0.686 0.653 0.698 0.647 0.703 0.685 0.639 0.665 0.64 ...\n $ explained_by_generosity                  : num [1:149] 0.124 0.208 0.204 0.293 0.302 0.249 0.244 0.166 0.276 0.215 ...\n $ explained_by_perceptions_of_corruption   : num [1:149] 0.481 0.485 0.413 0.17 0.384 0.427 0.448 0.353 0.445 0.292 ...\n $ dystopia_residual                        : num [1:149] 3.25 2.87 2.84 2.97 2.8 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   `Country name` = col_character(),\n  ..   `Regional indicator` = col_character(),\n  ..   `Ladder score` = col_double(),\n  ..   `Standard error of ladder score` = col_double(),\n  ..   upperwhisker = col_double(),\n  ..   lowerwhisker = col_double(),\n  ..   `Logged GDP per capita` = col_double(),\n  ..   `Social support` = col_double(),\n  ..   `Healthy life expectancy` = col_double(),\n  ..   `Freedom to make life choices` = col_double(),\n  ..   Generosity = col_double(),\n  ..   `Perceptions of corruption` = col_double(),\n  ..   `Ladder score in Dystopia` = col_double(),\n  ..   `Explained by: Log GDP per capita` = col_double(),\n  ..   `Explained by: Social support` = col_double(),\n  ..   `Explained by: Healthy life expectancy` = col_double(),\n  ..   `Explained by: Freedom to make life choices` = col_double(),\n  ..   `Explained by: Generosity` = col_double(),\n  ..   `Explained by: Perceptions of corruption` = col_double(),\n  ..   `Dystopia + residual` = col_double()\n  .. )\n - attr(*, \"problems\")=<externalptr> \n```\n:::\n:::\n\n#we know that we can join these data frames because they all share the column ladder score\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10 × 5\n   country_name ladder_score   gdp social_support healthy_life_expectancy\n   <chr>               <dbl> <dbl>          <dbl>                   <dbl>\n 1 Iraq                 4.85  9.24          0.746                    NA  \n 2 Comoros              4.29  8.03          0.626                    NA  \n 3 Panama               6.18 10.4           0.896                    NA  \n 4 Maldives             5.20  9.83          0.913                    NA  \n 5 Spain                6.49 10.6           0.932                    NA  \n 6 Iraq                NA    NA            NA                        60.6\n 7 Comoros             NA    NA            NA                        57.3\n 8 Panama              NA    NA            NA                        69.7\n 9 Maldives            NA    NA            NA                        70.6\n10 Spain               NA    NA            NA                        74.7\n```\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nNew names:\n• `country_name` -> `country_name...1`\n• `country_name` -> `country_name...5`\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 6\n  country_name...1 ladder_score   gdp social_support country_name...5\n  <chr>                   <dbl> <dbl>          <dbl> <chr>           \n1 Iraq                     4.85  9.24          0.746 Iraq            \n2 Comoros                  4.29  8.03          0.626 Comoros         \n3 Panama                   6.18 10.4           0.896 Panama          \n4 Maldives                 5.20  9.83          0.913 Maldives        \n5 Spain                    6.49 10.6           0.932 Spain           \n# ℹ 1 more variable: healthy_life_expectancy <dbl>\n```\n:::\n:::\n\nThe nrows functions confirms that the two data frames have the same number of columns, thus confirming that we can combine the them by column using the function bind_rows()\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n```\nJoining with `by = join_by(country_name)`\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 5\n  country_name ladder_score   gdp social_support healthy_life_expectancy\n  <chr>               <dbl> <dbl>          <dbl>                   <dbl>\n1 Iraq                 4.85  9.24          0.746                    60.6\n2 Comoros              4.29  8.03          0.626                    57.3\n3 Panama               6.18 10.4           0.896                    69.7\n4 Maldives             5.20  9.83          0.913                    70.6\n5 Spain                6.49 10.6           0.932                    74.7\n```\n:::\n:::\n\n#since both data frames contain the column \"country_name,\" we can make their combination cleaner by using the inner_join() function\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n```\nJoining with `by = join_by(country_name, ladder_score, social_support)`\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 144 × 20\n   country_name region          ladder_score standard_error_of_la…¹ upperwhisker\n   <chr>        <chr>                  <dbl>                  <dbl>        <dbl>\n 1 Finland      Western Europe          7.84                  0.032         7.90\n 2 Denmark      Western Europe          7.62                  0.035         7.69\n 3 Switzerland  Western Europe          7.57                  0.036         7.64\n 4 Iceland      Western Europe          7.55                  0.059         7.67\n 5 Netherlands  Western Europe          7.46                  0.027         7.52\n 6 Norway       Western Europe          7.39                  0.035         7.46\n 7 Sweden       Western Europe          7.36                  0.036         7.43\n 8 Luxembourg   Western Europe          7.32                  0.037         7.40\n 9 New Zealand  North America …         7.28                  0.04          7.36\n10 Austria      Western Europe          7.27                  0.036         7.34\n# ℹ 134 more rows\n# ℹ abbreviated name: ¹​standard_error_of_ladder_score\n# ℹ 15 more variables: lowerwhisker <dbl>, logged_gdp_per_capita <dbl>,\n#   social_support <dbl>, healthy_life_expectancy <dbl>,\n#   freedom_to_make_life_choices <dbl>, generosity <dbl>,\n#   perceptions_of_corruption <dbl>, ladder_score_in_dystopia <dbl>,\n#   explained_by_log_gdp_per_capita <dbl>, explained_by_social_support <dbl>, …\n```\n:::\n:::\n\n\nThis filter function filters out all countries from \"happy_full\" that are also in \"happy\"\n\npreserve2f7750c9c59edaa8\n\n<!--html_preserve-->\n<script type=\"application/shiny-prerendered\" data-context=\"dependencies\">\n{\"type\":\"list\",\"attributes\":{},\"value\":[]}\n</script>\n<!--/html_preserve-->\n<!--html_preserve-->\n<script type=\"application/shiny-prerendered\" data-context=\"execution_dependencies\">\n{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"packages\"]}},\"value\":[{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"packages\",\"version\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"data.frame\"]},\"row.names\":{\"type\":\"integer\",\"attributes\":{},\"value\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"base\",\"cli\",\"colorspace\",\"compiler\",\"crayon\",\"datasets\",\"digest\",\"dplyr\",\"evaluate\",\"fansi\",\"fastmap\",\"forcats\",\"generics\",\"ggplot2\",\"glue\",\"graphics\",\"grDevices\",\"grid\",\"gtable\",\"hms\",\"htmltools\",\"htmlwidgets\",\"httpuv\",\"jsonlite\",\"knitr\",\"later\",\"lifecycle\",\"lubridate\",\"magrittr\",\"methods\",\"mime\",\"munsell\",\"pillar\",\"pkgconfig\",\"promises\",\"purrr\",\"R6\",\"Rcpp\",\"readr\",\"rlang\",\"rmarkdown\",\"rstudioapi\",\"scales\",\"shiny\",\"stats\",\"stringi\",\"stringr\",\"tibble\",\"tidybiology\",\"tidyr\",\"tidyselect\",\"tidyverse\",\"timechange\",\"tools\",\"tzdb\",\"utf8\",\"utils\",\"vctrs\",\"withr\",\"xfun\",\"xtable\",\"yaml\"]},{\"type\":\"character\",\"attributes\":{},\"value\":[\"4.4.1\",\"3.6.3\",\"2.1-1\",\"4.4.1\",\"1.5.3\",\"4.4.1\",\"0.6.37\",\"1.1.4\",\"1.0.0\",\"1.0.6\",\"1.2.0\",\"1.0.0\",\"0.1.3\",\"3.5.1\",\"1.7.0\",\"4.4.1\",\"4.4.1\",\"4.4.1\",\"0.3.5\",\"1.1.3\",\"0.5.8.1\",\"1.6.4\",\"1.6.15\",\"1.8.9\",\"1.48\",\"1.3.2\",\"1.0.4\",\"1.9.3\",\"2.0.3\",\"4.4.1\",\"0.12\",\"0.5.1\",\"1.9.0\",\"2.0.3\",\"1.3.0\",\"1.0.2\",\"2.5.1\",\"1.0.13\",\"2.1.5\",\"1.1.4\",\"2.28\",\"0.16.0\",\"1.3.0\",\"1.9.1\",\"4.4.1\",\"1.8.4\",\"1.5.1\",\"3.2.1\",\"0.1.0\",\"1.3.1\",\"1.2.1\",\"2.0.0\",\"0.3.0\",\"4.4.1\",\"0.4.0\",\"1.2.4\",\"4.4.1\",\"0.6.5\",\"3.0.1\",\"0.47\",\"1.8-4\",\"2.3.10\"]}]}]}\n</script>\n<!--/html_preserve-->",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {
      "preserve2f7750c9c59edaa8": "\n<script type=\"application/shiny-prerendered\" data-context=\"server-extras\">\nojs_define <- function(..., .session = shiny::getDefaultReactiveDomain()) {\n  quos <- rlang::enquos(...)\n  vars <- rlang::list2(...)\n  nm <- names(vars)\n  if (is.null(nm)) {\n    nm <- rep_len(\"\", length(vars))\n  }\n  mapply(function(q, nm, val) {\n    # Infer name, if possible\n    if (nm == \"\") {\n      tryCatch({\n        nm <- rlang::as_name(q)\n      }, error = function(e) {\n        code <- paste(collapse = \"\\n\", deparse(rlang::f_rhs(q)))\n        stop(\"ojs_define() could not create a name for the argument: \", code)\n      })\n    }\n    .session$output[[nm]] <- val\n    outputOptions(.session$output, nm, suspendWhenHidden = FALSE)\n    .session$sendCustomMessage(\"ojs-export\", list(name = nm))\n    NULL\n  }, quos, nm, vars, SIMPLIFY = FALSE, USE.NAMES = FALSE)\n  invisible()\n}\n</script>\n"
    },
    "postProcess": true
  }
}